// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: readproto/read.proto

package readproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadAllBlogServiceClient is the client API for ReadAllBlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadAllBlogServiceClient interface {
	ReadBlog(ctx context.Context, in *Blogid, opts ...grpc.CallOption) (*Blogr, error)
}

type readAllBlogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadAllBlogServiceClient(cc grpc.ClientConnInterface) ReadAllBlogServiceClient {
	return &readAllBlogServiceClient{cc}
}

func (c *readAllBlogServiceClient) ReadBlog(ctx context.Context, in *Blogid, opts ...grpc.CallOption) (*Blogr, error) {
	out := new(Blogr)
	err := c.cc.Invoke(ctx, "/separategrpc.ReadAllBlogService/ReadBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadAllBlogServiceServer is the server API for ReadAllBlogService service.
// All implementations must embed UnimplementedReadAllBlogServiceServer
// for forward compatibility
type ReadAllBlogServiceServer interface {
	ReadBlog(context.Context, *Blogid) (*Blogr, error)
	mustEmbedUnimplementedReadAllBlogServiceServer()
}

// UnimplementedReadAllBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReadAllBlogServiceServer struct {
}

func (UnimplementedReadAllBlogServiceServer) ReadBlog(context.Context, *Blogid) (*Blogr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlog not implemented")
}
func (UnimplementedReadAllBlogServiceServer) mustEmbedUnimplementedReadAllBlogServiceServer() {}

// UnsafeReadAllBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadAllBlogServiceServer will
// result in compilation errors.
type UnsafeReadAllBlogServiceServer interface {
	mustEmbedUnimplementedReadAllBlogServiceServer()
}

func RegisterReadAllBlogServiceServer(s grpc.ServiceRegistrar, srv ReadAllBlogServiceServer) {
	s.RegisterService(&ReadAllBlogService_ServiceDesc, srv)
}

func _ReadAllBlogService_ReadBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blogid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadAllBlogServiceServer).ReadBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/separategrpc.ReadAllBlogService/ReadBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadAllBlogServiceServer).ReadBlog(ctx, req.(*Blogid))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadAllBlogService_ServiceDesc is the grpc.ServiceDesc for ReadAllBlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadAllBlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "separategrpc.ReadAllBlogService",
	HandlerType: (*ReadAllBlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadBlog",
			Handler:    _ReadAllBlogService_ReadBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "readproto/read.proto",
}
